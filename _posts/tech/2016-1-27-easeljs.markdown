---
layout: post
title: 搞懂easelJS 
category: 技术
keywords: 技术,easeljs,createJs
---

## HelloWorld

我们开始步入正题

首先引入easelJs 我现在使用的是`easelJs-0.8.2-min-js` 只要这一个文件就ok 
下载的话直接到官网 或者 中文API 里都有 [中文API](http://www.createjs.cc/)

{% highlight html %}
<script src="../easeljs-0.8.2.min.js" ></script>
{% endhighlight %}

首先，先声明一点，`createJS` 是多个JS框架一个统称，就好像 adobe 公司旗下的 PS 、 AI 、 Flash一样， easeljs 只是createJS旗下的一个框架工具

createJS其中包括:

① EaselJS 用于绘制位图，做动画，用户交互( easel: 画架 )
② TweenJS 用于制作补间动画（不了解的可以自行google） 俗称过渡效果
③ SoundJS 故名思意，处理音频的音频播放引擎
④ PrloadJS 简化网站资源预加载，优化加载速度
⑤ PxLoadr 网页预加载工具

有了这些工具，就可以来弄H5游戏了，当然，我们现在只了解基础的easeljs

## 全局对象

`easeljs`所有的功能都是被一个全局类所包含的，这个全局对象的名称叫`createjs`(每当调用createjs旗下的一个库的时候，都会保存在这个对象中)，我们可以console一下这个对象，看看easeljs到底有些什么

{% highlight Javascript %}
Object {EaselJS: Object}  这个对象里只有一个easel库
	AlphaMapFilter: 
	AlphaMaskFilter: 
	Bitmap:             位图，用于引入图片
	BitmapText:         位图中绘制文字
	BlurFilter: 		模糊滤镜
	ButtonHelper: 
	ColorFilter:        颜色滤镜
	ColorMatrix: 
	ColorMatrixFilter: 
	Container: 
	DOMElement: 
	DisplayObject: 
	DisplayProps: 
	EaselJS: 			版本信息
	Event: 
	EventDispatcher: 
	Filter: 			滤镜
	Graphics: 			绘制各种图形
	Matrix2D: 
	MouseEvent: 		鼠标事件，用于与用户交互
	MovieClip:  		动画剪裁
	Point:      		绘制点
	Rectangle:  		绘制矩形
	Shadow:     		绘制阴影
	Shape:      		新建图形图层
	Sprite:     
	SpriteSheet: 
	SpriteSheetBuilder: 
	SpriteSheetUtils: 
	Stage:      		新建舞台
	Text:       		绘制文本图层
	Ticker: 
	Touch:      		移动端交互
	UID:        		生成一个独一无二的序列号
	extend:     
	indexOf: 
{% endhighlight %}

很多功能和方法，先说个简单的把，使用`EaselJS` 可以打印出当前easeljs的版本信息和项目构建时间
{% highlight Javascript %}
console.log(createjs.EaselJS.buildDate + " & " + createjs.EaselJS.version);
{% endhighlight %}

如果我又加入了createJs旗下的tweenJS 那么这个对象就会变成
Object {EaselJS: Object , TweenJS: Object}

这样保证了很多命令都是在createJs 旗下的，如果这些类库中有和其他动画框架重名的话，就不会互相污染出错了。

## 先从一个简单的栗子说起

先画个我信管创业基地的logo
[demo](/assets/download/createJS-tutorial/easelJSDemo/canvastext.html)

看完这个demo 小伙伴可能很不屑吧，确实，这种效果使用canvas 也可以做得到，但是如果使用canvas原生去写，会麻烦很多，还不能和`tweenJS` 配合做出来动画的效果

所以，我们要想能实现好看，能动，还能互动的 炫酷梦幻高大上效果，就先得从基本的画图命令开始

首先的在body里写个`canvas`标签吧
{% highlight html %}
<canvas id="stage" width="840" height="950" ></canvas>
{% endhighlight %}
注意宽高只能以属性形式来表示，具体原因就不多赘余了，自己google

再来就来开始写绘图代码了，上午我说过，所有命令都是在`createJs`旗下的，那么我们就先弄个引用
{% highlight Javascript %}
var c = createJs;
{% endhighlight %}

当然你不弄也行，代码能省则省呗

然后我们新建一个舞台，注意，这个舞台接受一个参数，就是需要实现绘图的`canvas` DOM结点
{% highlight Javascript %}
var oStage = new c.Stage("stage");
{% endhighlight %}

注意，Stage构造器自带`document.getElementById`方法，可以直接丢ID值进去
但是，类和标签不行

当然也可以这样写，都是等价的
{% highlight Javascript %}
var oBox = document.getElemengById("stage");
var oStage = new c.Stage(oBox);
{% endhighlight %}

搭建好舞台之后，我们就要在舞台上添加元素和图层了

{% highlight Javascript %}
var Run1 = new c.Shape();
var Run2 = new c.Shape();
{% endhighlight %}

每个图层类有一个`graphics(图形图像)`方法，其实也就是继承了`Graphics`类，
因为每次画完图像之后都要添加到图层里面，所以这个库的作者就也在`Shape`的类中继承了`Graphics`类

其中可以先对画笔初始化 `setStrokeStyle` 设置画笔大小 和 `beginStroke("#fff")`设置颜色
其中画线就是`moveTo` 或 `mt(简写 效果和moveTo相同)` 和 `lineTo` 或 `lt` 呗

{% highlight Javascript %}
Run1.graphics.setStrokeStyle(2).beginStroke("#fff")
	.mt(510,270)
	.lt(410,213)
	.lt(95,392)
	.lt(95,300)
	.lt(420,116)
	.lt(684,270)
	.lt(0,658)
	.lt(0,715)
	.lt(420,950)
	.lt(840,720)
	.lt(840,400)
	.lt(318,690);
oStage.addChild(Run1);

Run2.graphics.setStrokeStyle(2).beginStroke("#fff")
	.mt(318,690)
	.lt(420,750)
	.lt(737,568)
	.lt(737,660)
	.lt(420,840)
	.lt(152,685)
	.lt(840,297)
	.lt(840,240)
	.lt(420,0)
	.lt(0,240)
	.lt(0,568)
	.lt(510,270);
oStage.addChild(Run2);
{% endhighlight %}

每次绘制完一个图层之后，都需要使用`addChild`添加到舞台中，

最后，updata 舞台，大功告成

{% highlight Javascript %}
oStage.update();
{% endhighlight %}
