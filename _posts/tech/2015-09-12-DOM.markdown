---
layout: post
title:  DOM和BOM学习笔记
category: 技术
keywords: 技术,DOM,javascript,js
---

## document object model and browser object model

众所周知，js是由 ecmascript + BOM + DOM 组成的

ecmascript 指的是js的各种基本语法，数据类型，继承，对象，原型等等等

而BOM和DOM是w3c组织为了我们使用ecmascript能够更好的操控html页面和css，来写的一套程序接口,
有了BOM（browser object model）我们就可以获取当前用户正在使用的浏览器的相关参数，信息
窗口的位置、大小及以下这几个对象
[document frames history location navigator screen]

document下面又包括了
[anchors forms images links location]

而bom之上则是window对象

这里请允许我盗张图
![pic](/assets/img/browser-object-model.png)

有了DOM我们就可以把html想成一棵节点树
![dom-tree](/assets/img/DOM.png)

有了这棵树，及其配套的方法，我们就可以通过html任意的控制document下的任意节点，包括他们的子级，父级，兄弟，及其对应的css等等等

我们可以简单的认为 window 包含 bom，bom下面包含了dom

## DOM

DOM下面包含的类型有十二种
|  | NodeType | Named Constant | 

|:----- |:--------:|
|1 | ELEMENT_NODE |

|:----- |:--------:|
|2 | ATTRIBUTE_NODE |

|:----- |:--------:|
|3 | TEXT_NODE |

|:----- |:--------:|
|4 | CDATA_SECTION_NODE |

|:----- |:--------:|
|5 | ENTITY_REFERENCE_NODE |

|:----- |:--------:|
|6 | ENTITY_NODE |

|:----- |:--------:|
|7 | PROCESSING_INSTRUCTION_NODE |

|:----- |:--------:|
|8 | COMMENT_NODE |

|:----- |:--------:|
|9 | DOCUMENT_NODE |

|:----- |:--------:|
|10 | DOCUMENT_TYPE_NODE |

|:----- |:--------:|
|11 | DOCUMENT_FRAGMENT_NODE |

|:----- |:--------:|
|12 | NOTATION_NODE |
	
我们可以使用`nodeType`来查看DOM树下的某个元素的属性类型

## childNodes & children

对于任意的一个DOM树下的结点，我们可以访问他的childNodes属性来获取他底下所有子结点


childNodes是一个类数组，所以也可以访问其下的length方法，并且你还可以访问并修改其下的元素

例如如下html结构：
{% highlight html %}
<ul id="ul"><li></li><li></li><li></li></ul>
{% endhighlight %}

你可以通过遍历来为ul下面的子节点添加背景色
{% highlight javascript %}
var oUl = document.getElementById("ul");

for(var i = 0; i < oUl.childNodes.length ; i++)
{
	oUl.childNodes[i].style.background = "red";
}
{% endhighlight %}

细心的同学可能就会发现，为什么上面的html结构，我没有给li添加缩进
这是因为，缩进也是字符，算是文本结点，也会被标准的浏览器获取到（但是低版本的IE浏览器不能够获取到文本结点），而文本节点并没有style这个属性，如果直接给循环添加颜色，就会报错。

当然没有缩进肯定是令人无法忍受的，如果我们需要使用childNodes来遍历子节点，就需要能判断子节点的类型。

那么，如何判断子节点的类型呢？

这就需要我们使用`nodeType`属性进行判断了

如果对应缩进的html
{% highlight html %}
<ul id="ul">
	<li></li>
	<li></li>
	<li></li>
</ul>
{% endhighlight %}

可以这么写JS
{% highlight javascript %}
var oUl = document.getElementById("ul");

for(var i = 0; i < oUl.childNodes.length ; i++)
{
	if( oUl.childNodes[i].nodeType == 1 ) // 标号1对应元素结点
	{
		oUl.childNodes[i].style.background = "red";
	}
}
{% endhighlight %}

children 和 childnodes用法差不多，但是children只是获取父级下的元素节点，除元素结点之外的子节点都不会获取，所以平时我们可能用的children多一些

## child

上面我们介绍了两个集合方法的属性，其实还有其他的属性可以访问父级下的结点

例如`firstChild`,我们就可以访问父级下的第一个结点，当然如果是有缩进的html结构，在标准浏览器下，获取的是缩进的文本节点，低版本IE浏览器获取的是元素了

那么如果我们要获取第一个元素节点呢？可以标准浏览器为我们提供的`firstElementChild`(这个属性在低版本浏览器下并不支持)

兼容的写法就是
{% highlight javascript %}
var oUl = document.getElementById("ul");
var oFirstChild = oUl.firstElementchild || oUl.firstChild
{% endhighlight %}

同理也就有`lastChild`和`lastElementChild`

## 兄弟结点

我们还可以同通过`nextSibling` 来获取同级的下一个节点 用`nextElementSibling` 来获取同级的下一个元素节点

那么同理,获取上一个节点和元素节点我们就可以使用`previousSibling`和`previousElementSibling`

兼容方法也类似
{% highlight javascript %}
var oPreviousChild = oUl.previousElementSibling || oUl.previousSibling;
var oNextChild = oUl.nextElementSibling || oUl.nextSibling ;
{% endhighlight %}

## attributes
这里还有一个有意思的东西，属性结点.
我们可以通过属性结点，来获取一个元素的属性

通过获取元素，并访问其下的`attributes`属性（只读）

例如一个div
{% highlight html %}
<div id="owen" class="zyz"></div>
{% endhighlight %}

我们通过attributes 就能获取div的两个属性 id 和 class
{% highlight javascript %}
var oDiv = document.getElementById("owen");

for(var i = 0; i < oDiv.attributes.length ; i++)
{
	console.log("第"+ i +"个属性的名称是" + oDiv.attributes[i].name + " 值是" + pDiv.attributes[i].value);
}
{% endhighlight %}

## 父结点

如果我们希望通过子级来访问父级的话呢？

我们可以使用`ParentNode`这个只读属性来访问父节点

例如如下布局:
{% highlight html %}
<ul>
	<li>段落一 <a href="javascript:;">隐藏</a></li>
	<li>段落二 <a href="javascript:;">隐藏</a></li>
	<li>段落三 <a href="javascript:;">隐藏</a></li>
	<li>段落四 <a href="javascript:;">隐藏</a></li>
</ul>
{% endhighlight %}

如果我们平时需要实现点击隐藏的功能，可以当点击的时候获取点击标签索引，然后再根据索引将li隐藏

现在我们可以直接省略获取索引这一步，直接使用`parentNode`来控制父节点的隐藏
{% highlight javascript %}
var oA = document.getElementsByTagName('a');

for(var i in oA)
{
	oA[i].onclick = function() {
		this.parentNode.style.display = "none";
	}
}
{% endhighlight %}

除了`parentNode` 还有 `offsetParent` , 这个属性是获取的子级的定位父级

例如如下布局:
{% highlight html %}
<div id="div1">
	<div id="div2">
		<div id="div3"></div>
	</div>
</div>
{% endhighlight %}

如果div3的所有父级都没有设置position，那么就是没有定位的元素
如果这时候我获取div3的定位父级，那么获取的是body
{% highlight javascript %}
var oDiv3 = document.getElementById("div3");

console.log(oDiv3.offsetParent.tagName); // body
{% endhighlight %}

但是如果我给div1 或者 div2 添加了position,那么被添加了position的div父级 就成了 div3的 
`定位父级`

如果div1 和 div2 都添加了position 那么浏览器会选取距div3最近的父级也就是div2作为div3的定位父级 
{% highlight html %}
<div id="div1">
	<div id="div2" style="positon:relative;">
		<div id="div3"></div>
	</div>
</div>
{% endhighlight %}

{% highlight javascript %}
var oDiv3 = document.getElementById("div3");

console.log(oDiv3.offsetParent.id); // div2
{% endhighlight %}

IE7- 的浏览器还有一些不qi合pa群的特性，如果你要兼容IE7以下的浏览器的话，需要考虑
例如
上面div3之上的父级都没有定位，这时候div3默认的定位父级就是body标签，但是如果给div3添加了定位，那么div3的父级就变成了html

还有IE7的 `layout` , 有些特殊的Css属性会触发layout 把当前元素变成定位元素 例如 zoom属性

## offsetLeft[Top]

offsetLeft 和 Top 可以获取自己元素到`定位父级`的距离

{% highlight javascript %}
var oDiv3 = document.getElementById("div3");

console.log(oDiv3.offsetLeft);
{% endhighlight %}

如果要获取一个元素到浏览器最顶部的距离（最左部的距离）呢？
我们可以封装一个函数
{% highlight javascript %}
var obj = document.getElementById("div3");
var Left = 0;
var Top  = 0;

while( obj ) {	
	Top += obj.offsetTop;
	Left += obj.offsetLeft;
	obj = obj.offsetParent;
}
{% endhighlight %}

思路就是，不断的取到定位父级的距离，一直到`Body`， 而Body的定位父级是Null(不是html) Body的offsetTop(Left)是0 所以当循环到Body的时候，循环停止，返回的就是一个元素到最顶端的距离

## 盒模型的三种宽高

style.width & height 内容区域宽高 包括: 实际宽高 (带px单位)
offsetWidth & Height 可视区域宽高 包括: 实际宽高 + padding
clientWidth & Height 盒子实际宽高 包括: 实际宽高 + padding + border

## 动态操纵元素

使用createElement 添加元素
{% highlight javascript %}
document.createElement("需要创建的标签名");
{% endhighlight %}

使用appendChild 创建元素
{% highlight javascript %}
被添加的元素对象.appendChild( 添加的元素对象 );
{% endhighlight %}

我们也可以使用insertBefore 在每个元素的之上插入元素
{% highlight javascript %}
插入元素的父级.insertBefore( 被添加的元素 , 某个定位元素 );
{% endhighlight %}

但是如果在父级元素一个子节点都没有的情况下
在IE下，使用insertBefore会报告错误
但是在标准浏览器下，使用insertBefore会默认以appendChild进行插入

所以如果我们需要兼容IE和标准浏览器的话，可以这样写
{% highlight javascript %}
if( !父级.children[0] )
{
	父级.appendChild( 被添加的元素对象 );
}else {
	父级.insertBefore( 被添加的元素对象 ， 某个定位元素 );
}
{% endhighlight %}

除此之外，我们还可以使用removeChild 删除元素
{% highlight javascript %}
父级.removeChild( 被删除的元素 );
{% endhighlight %}

还可以使用replaceChild 来替换元素
{% highlight javascript %}
父级.replaceChild( 替换元素 , 被替换元素 );
{% endhighlight %}

需要注意的是,以上的全部方法，都需要在父级下进行操作，也就是说如果需要动态的操作元素，一定要获取到这些元素的父级

## 自己封装一个getByClassName

选取页面的元素，我们可以使用getElementById 或者 getElementsByTagName
但是有没有一个方法能够通过class来选取元素呢？

在标准浏览器下是有的， `getElementsByClassName`
但是在非标准浏览器下却没有这个函数，所以如果需要兼容，就的自己写一个
{% highlight javascript %}
function getByClass( parent  , sClass , tag ) {
	var tag = tag || '*';
	var aTag = parent.getElementsByTagName(tag);
	var result = [];

	for( var i = 0 ; i < aTag.length ; i++ )
	{
		var aTagClass = aTag[i].className.split(' ');

		for( var j in aTagClass )
		{
			if( aTagClass[j] == sClass )
			{
				result.push(aTag[i]);
				break;
			}
		}
	}

	return result;
}
{% endhighlight %}

调用的时候就将需要 第一个参数获取类元素的父级传参，第二个参数为匹配的class类名，第三个参数选填，为匹配的标签名称(如果没填默认全部选中)

注意:使用的时候返回的是一个数组,如果获取的类只有一个,那么就需要使用[0]

## 表格的DOM方法

如下表格结构
{% highlight html %}
<table width="100%" boder="1px">
	<thead>
		<tr>
			<th>编号</th>
			<th>姓名</th>
			<th>性别</th>
			<th>年龄</th>	
		</tr>
	</thead>

	<tbody>
		<td>01</td>
		<td>欧阳</td>
		<td>男</td>
		<td>19</td>
	</tbody>

	<tbody>
		<td>02</td>
		<td>老王</td>
		<td>男</td>
		<td>20</td>
	</tbody>

	<tbody>
		<td>03</td>
		<td>老李</td>
		<td>女</td>
		<td>21</td>
	</tbody>

	<tfoot>
		<td>平均年龄</td>
		<td></td>
		<td></td>
		<td>20</td>
	</tfoot>
</table>
{% endhighlight %}

如果我们需要对表格进行操作，DOM为我们提供了一些DOM方法进行操作
例如我们要把每行都变色
{% highlight javascript %}
var oTable = document.getElementsByTagName('table')[0];
		
	oTable.tBodies[0].style.background = 'yellow';
	oTable.tBodies[1].style.background = 'red';
	oTable.tBodies[2].style.background = 'pink';

{% endhighlight %}

我们可以操作每个`tBodies`属性来进行改变


如果我们只需要修改表格头,那么就使用`tHead`
{% highlight javascript %}
var oTable = document.getElementsByTagName('table')[0];
	oTable.tHead.style.background = 'yellow';
{% endhighlight %}

当然我们也可以操作他们的`tfoot`
{% highlight javascript %}
var oTable = document.getElementsByTagName('table')[0];
	oTable.tFoot.style.background = 'yellow';
{% endhighlight %}

但是如果我们需要修改某个表格内的元素呢？
例如第一行列第四列，希望将其值修改成20
{% highlight javascript %}
var oTable = document.getElementsByTagName('table')[0];
	oTable.tBodies[0].rows[0].cells[3].innerHTML = "20";
{% endhighlight %}

当然我的例子里面是一个body对应一行,当然也可以一个body里有任意多行，照葫芦画瓢

## DOM表单

表单这个东西十分常用，当我们需要操纵表单的时候，DOM也给我们提供了操纵的方法
例如:
{% highlight html %}
<form>
	<input type="text" name="text1" value="内容">
</form>
{% endhighlight %}
在表单中，最有用的一个属性就是`name`属性了，通过name我们可以标识发送给后端的内容是什么,也就是说name在JS里面基本可以替代ID 和 class来获取和操控表单元素,所以DOM也为name提供了相应的方法

例如我们可以这样来获取一个表单底下的表单元素的内容
{% highlight javascript %}
var oForm = document.getElementsByTagName("form")[0];

console.log(oForm.text1.value);// 内容
{% endhighlight %}

当然，DOM

,DOM还为表单元素提供了一个事件

## 感谢

[妙味课堂](www.miaov.com)

## 引用出自

### 《javascript高级程序设计》


