---
layout: post
title: Ajax学习笔记(部分原创 + copy他人知识的汇总)
category: 技术
keywords: 技术,Ajax,wampserver,建站
---
## 准备工作
因为我们接下来学习的是如何异步的与后台交换数据
所以我们需要先下载一个服务器软件(帮我们配置好默认的配置信息)
然后将我们的主机模拟成一台服务器，进行接下来的学习

我学习AJAX的时候使用的wampserver 一个法国人开发的一个服务器软件
里面包含了PHP运行环境、Aapache运行环境和MySQL

大家根据自己电脑的位数 自行下载wampserver

## 使用wampserver 可能会遇到的问题

问题一 :
点击Your Projects的下的文件夹链接， url变成项目名，路径出错，没有了localhost

解决方法:在www目录下找到index.php，然后修改里面查找$projectContents，或直接查看338行代码，修改'http://'为'http://localhost/'即可。

## 小白级使用wampserver
双击打开wampserver 在右下角有运行图标
![shootpic](/assets/img/AJAX-shootpic1.png)

localhost就是你的本机地址
www directory 是本机存放数据的文件夹 你练习的文件都需要存在www这个文件夹里面

更深入的了解wampserver 可以自己百度 这里不再赘余

## 什么是AJAX？
Ajax (Asynchronous Javascript And XML) 也就是异步的 javascript 和 XML

首先解释一下所谓的异步和同步是什么

在生活中，异步就是行为上的不同步，不协调，比如一个工程分工 A 和 B的工作速度不同，结果工作进度异步
同步就是行为上的相同，比如中央进行利率调整，同步的，股市也会因此涨跌

但是，在计算机中，异步和同步理解起来就和生活中的完全相反

异步 :进程非堵塞的
	e.g:
{% highlight JavaScript %}
settimeout(consonle.log(1),2000);
console.log(2);
{% endhighlight %}
	
这里settimeout也就是2秒后打印出1
但是consonle.log(2)不会等settimtout2秒打印出1后才执行，它会立即执行，也就是说settimeout这个代码块不会堵塞总体代码的执行进程，之后的代码不会因为它的延时执行而不立即执行

同步 :进程堵塞的
e.g
{% highlight  JavaScript %}
<script src="jquery.js"></script>
<script>
window.onload = function()
{
	$(function(){});
}
</script>
{% endhighlight %}

如果要让 `$(function(){});`  这句代码执行。 必须等到这个库`<script src="jquery.js"></script>` 加载完，不然这个封装的方法就无法使用，这就是所谓的进程堵塞，也就是同步

说白了，生活中的同步异步针对的各个对象之间的联系，而计算机中是针对进程上的联系

## 最基本的AJAX

直接上代码:
{% highlight  JavaScript %}
	//可以想象成虚拟的打开了一个输入Url的地址框
	try
	{
		//IE7以上创建AJAX对象
		xhr = new XMLHttpRequest();
	}
	catch(e)
	{
		//兼容IE6 以ActiveXObject插件创建AJAX对象
		xhr = new ActiveXObject('Microsoft.XMLHTTP');
	}

	//可以想象成向这个虚拟的地址框里输入要访问文件的地址
	xhr.open('get(传输的方式 有get & post 两种)','需要加载的文件的文件名','是否异步(true & false)');

	//可以想象成回车发送请求
	xhr.send();
	
	//服务器接收处理请求，然后返回文件数据
	xhr.onreadystatechange = function()
	{
		if(xhr.readystate == 4)
		{
			//如果HTTP状态码 等于 200(请求成功) 那么就打印出返回的文件内容
			if( xhr.status == 200)
			{
				alert( xhr.responseText );
			}
			else
			{
				alert( '出错咯 ，Err : ' + xhr.status)
			}
		}
	}

========华丽丽的分割线========

如果需要象HTML表单那样，也就是说用POST上传数据,
则需要添加HTTP头声明
然后，在send()中规定你所需要发送的数据

也就是说上面简单的
xhr.open('get','需要加载的文件的文件名','是否异步(true & false)');

xhr.send();

要改成

xmlhttp.open("POST","ajax.php",true);
xmlhttp.setRequestHeader("Content-type","application/x-www-form-urlencoded");
xmlhttp.send("name=Owen&password=123456");

{% endhighlight %}


对上面的代码做一些解释:
readystate : 是AJAX的状态码，用来表示AJAX运行的各种状态

{% highlight JavaScript %}
0 >>（初始化）还没有调用open()方法
1 >>（载入）已调用send()方法，正在发送请求
2 >>（载入完成）send()方法完成，已收到全部响应内容
3 >>（解析）正在解析响应内容
4 >>（完成）响应内容解析完成，可以在客户端调用了
{% endhighlight %}

on readystate change事件 : 当AJAX状态改变执行事件，
注意，只要open声明的是异步的
这个事件的代码甚至可以放在新建AJAX对象代码，
之后的任何地方，原因很简单，
因为整个进程是非堵塞的嘛(再次复习同异步的概念)

xhr.status : 服务器(请求资源)的状态 HTTP状态编码

responseText：返回以文本形式存放的内容(注意: 不论什么格式的内容都会以文本形式返回，
如果编码存在问题 ， 可能会导致一些其他问题)

responseXML ：返回XML形式的内容

setRequestHeader(header,value)
添加HTTP头请求函数
header部分 规定了请求头的名称
value 部分 规定了请求头的值

## 幂等(idempotent、idempotence)

首先解释一下幕等的概念，幂等是是一个数学或计算机学概念，常见于抽象代数中。但是不要给这么高逼格的词吓到了。其实说白了很简单

比如说 1+3=4  和 1+2+1=4
这里 两个计算结果是相同的 就是所谓的幂等 ,再举个难点的例子 max(x,x) == max(min(x,x),max(x,x)) 
这个看起来是不是很复杂？但是细心一看 这两边运算结果不是都一样的么？多步运算和一步结果相同，哈哈 这也叫幂等
			
copy一下权威内容(更深奥的理解详见百度谷歌) :

幂等有以下几种定义:
对于单目运算，如果一个运算对于在范围内的所有的一个数多次进行该运算所得的结果和进行一次该运算所得的结果是一样的，那么我们就称该运算是幂等的。比如绝对值运算就是一个例子，在实数集中，有abs(a) == abs(abs(a)) 。   

对于双目运算，则要求当参与运算的两个值是等值的情况下，如果满足运算结果与参与运算的两个值相等，则称该运算幂等，如求两个数的最大值的函数，有在在实数集中幂等，即max(x,x) == x。
			
关于幂等，我们还可以看一下下面这个例子

假设我们网站上需要在线支付的功能,那么我们肯定要写个函数对吧
好，坐了几个小时的冷板凳写出来了，然后调用
			
{% highlight JavaScript %}
bool withdraw(account_id, amount)
{% endhighlight %}
			
bool函数withdraw，返回true或者flase 传递的参数是 用户的账号(account_id) 和 要支付的金额(amount)
			
然后上线给用户使用啦，结果不到一天，就给老板请到办公室喝茶，说有用户投诉，明明只需要付一次钱，却扣了很多次，有bug，又要苦逼的加班修改了 T_T

结果又花了半天的时间分析，分析来分析去，终于发现了问题所在

![idempotence](/assets/img/idempotence1.png)

用户端已经成功输完密码，支付了相应的款项，但是，因为网络原因，服务器已经成功扣款的消息没有及时出现在用户端，结果，用户以为出了什么错误，手残又按无数次刷新，结果导致，多次付费...

好吧既然，问题清楚了，那就想办法解决
于是，想来想去，好了，凌晨1点，终于，想出来了
			
{% highlight JavaScript %}
int create_ticket() 
bool idempotent_withdraw(ticket_id, account_id, amount)
{% endhighlight %}
			
多加了一个int函数create_ticket 返回一个整型的支付效验码 ，idempotent_withdraw多加了一个形参ticket_id。

{% highlight JavaScript %}			
好，具体步骤是什么呢？哈哈，其实很简单嘛 (满脸狞狰的说)

第一步：
傻乎乎的用户如果需要支付款项，我就让用户端，先执行一下create_ticket产生一个效验码，
然后传到服务器端
如果，又因为网络原因没有成功传输，
没关系，反正效验码又不值钱，
傻乎乎的用户刷新的时候再调用一次create_ticket产生一个新的传过来就是了。
			
好了，如果上一步的过程成功了，
用户端和服务器端就会拥有了一个共同的，也就是我们所谓的幂等的效验码

(因为网路原因导致重复产生效验码所得到的影响和一次步骤就成功产生效验码所得到的影响是相同的,
都是让用户端和服务端得到一个共同的ID)

第二步：
用户端根据得到的效验码，支付款项。
如果又网络错误，没事，再次请求支付款项就行了,
反正没传递到服务器端是不会扣钱的

第三步：
服务器端收到请求，执行扣款，然后，状态标记为已经扣款成功
(注意:时候用户端状态是扣款未成功)

第四步：
服务器端返回扣款成功的消息。
这时候，假设又因为网络原因，消息传输失败了，怎么办？
没关系，反正幂等的效验码在那里。
如果失败了，用户刷新重新支付，
服务器查询效验码，发现状态是已经支付成功，就不会再扣钱，
然后再次返回成功支付的消息，
直到用户端接收成功这个消息并更改状态为支付成功，
这样一个优雅的支付功能就写好了。(终于可以回家睡觉觉了=_=)
{% endhighlight %}
![idempotence](/assets/img/idempotence2.png)

			
总结来说就是，幂等即任意多次执行所产生的影响均与一次执行的影响相同。
	
## 关于get和post两种传输方式分析、关于幂等性分析

### get的传输方式分析

1.以?分割URL和传输数据，参数之间以&相连，如：www.baidu.com
?name=Owen+Brown&password=xxxxx&verify=%e6%88%91%e7%9a%84%e5%90%8d%e5%ad
%97%e5%8f%ab%e6%ac%a7%e9%98%b3%e6%b9%98%e7%b2%a4。

{% highlight JavaScript %}
	我们分解一下这串url

www.baidu.com是网站域名
? 之后是GET方式传递的数据
也就是假设我们在www.baidu.com这个网站上填写了三个表单
对应的分别是
	姓名：<input type="text" name=name> => 输入了Owen Brown => url中显示 name=Owen+Brown
	密码：<input type="password" name=password> => 输入了xxxxx => url中显示 password=12345
	验证：<input type="text" name=verify> => 输入了我的名字叫欧阳湘粤 => url中显示 verify=%e6%88%91%e7%9a%84%e5%90%8d%e5
	%ad%97%e5%8f%ab%e6%ac%a7%e9%98%b3%e6%b9%98%e7%b2%a4(Url编码加密)
解释：
如果数据是英文字母/数字，原样发送，
如果是空格，转换为+，
如果是中文/其他字符，则直接把字符串用Url编码加密,
其中％XX中的XX为该符号以16进制表示的ASCII。
{% endhighlight %}

2.因为url栏目有字符上限,所以有关大量数据的传递，一来因为会把数据内容显示在url栏，会有安全性问题，再来有url有字符上限，如果超过上限数据就无法进行传输，所以建议，get应用在小规模数据传递且数据所需安全性不用太高的表单中

		
{% highlight JavaScript %}
以下是网友对一些浏览器地址栏最大字符上限的测试:

Microsoft Internet Explorer (Browser)
IE浏览器对URL的最大限制为2083个字符，如果超过这个数字，提交按钮没有任何反应。在我的测试中，这个数字得到验证。

Firefox (Browser)
写道Bad Request
Your browser sent a request that this server could not understand.
Size of a request header field exceeds server limit.
??

Safari (Browser)
URL最大长度限制为 80,000个字符。
		
Opera (Browser)
URL最大长度限制为190,000个字符。
		
Google (chrome)
url长度一旦超过8182个字符时，出现如下服务器错误：写道Request-URI Too Large
The requested URL's length exceeds the capacity limit for this server.
Apache/2.2.12 (Ubuntu) Server at 127.0.1.1 Port 80??Apache (Server)
能接受最大url长度为8,192个字符，但我的测试数据是8,182，10个字符，差别不在，数据具体符合。
			
Microsoft Internet Information Server(IIS)
能接受最大url的长度为16,384个字符。
			
实际上，URL不存在参数上限的问题，HTTP协议规范没有对URL长度进行限制。
这个限制是特定的浏览器及服务器对它的限制,之所以对地址栏长度进行限制,
一来url过长，会对服务器处理产生负担，如果有人恶意地构造了几个几M大小的URL，并不停地访问你的服务器。
服务器的最大并发数显然会下降，介于安全和稳定的考虑，故而给了url加了限制。
{% endhighlight %}

### get的安全安全性

get相对与post方法对于服务器而言是较安全的
这里所谓的安全不是上文所指的安全，这里的安全是对于服务器而言的，而上文的安全是对用户而言的。

这里的安全意思是操作用于获取信息而非修改信息。换句话说，GET请求一般不应产生副作用。就是说，它仅仅是获取资源信息，就像数据库查询一样，不会修改，增加数据，不会影响资源的状态。



### get的幂等性

GET方法用于获取资源，不应有副作用，所以是幂等的。
比如：GET http://www.bank.com/account/123456，
不会改变资源的状态，不论调用一次还是N次都没有副作用(影响)。
请注意，这里强调的是一次和N次具有相同的副作用(影响)，
而不是每次GET的结果相同。

比如：GET http://www.news.com/latest-news
这个HTTP请求可能会每次得到不同的结果，
但它本身并没有产生任何副作用，
因而是满足幂等性的。

### post的传输方式分析

1.在url地址栏上不显示传输的内容

2.理论上来说对数据的大小没有传输的限制，
但HTTP规范也没有对其进行限制，起限制作用的是服务器的处理能力。

### post方法的安全性

{% highlight JavaScript %}
安全性能比get要高(对于用户来说)
但是对于服务器来说比get低
(1)登录页面有可能被浏览器缓存
(2)其他人查看浏览器的历史纪录，那么别人就可以拿到你的账号和密码了，
除此之外，使用GET提交数据还可能会造成Cross-site request forgery攻击
{% endhighlight %}

### post的幂等性

post请求不幂等
POST所对应的URI并非创建的资源本身，而是资源的接收者。

比如：POST http://www.forum.com/articles的语义
是在http://www.forum.com/articles下创建一篇帖子，

HTTP响应中应包含帖子的创建状态以及帖子的URI。
两次相同的POST请求会在服务器端创建两份资源，它们具有不同的URI;


### 总结一下
{% highlight JavaScript %}

_________|~幂等性~|~~对于用户安全性~~~|~~对于服务器安全性~~~|~~~适用于~~
	-----|--------|------------------|--------------------|-----------
	post |   否   |~~~~~~~~高~~~~~~~~|~~~~~~~~~低~~~~~~~~~|~~~修改数据
	-----|--------|------------------|--------------------|-----------
	get  |   是   |~~~~~~~~低~~~~~~~~|~~~~~~~~~高~~~~~~~~~|~~~提取数据
{% endhighlight %}

所以get多用于从服务器上获取数据，post多用于从服务器上发送数据
但是,GET和POST只是发送机制不同，并不是一个取一个发！(GET和POST都能取和发)

## JSON对象 和 AJAX 结合

浏览器(IE7以上和标准浏览器支持JSON对象 和 他们底下的一些方法)
如果要兼容IE6 可以从外部导入 [JSON.js](https://github.com/douglascrockford/JSON-js)

关于JSON具体的研究分析，请看本站[JSON对象学习笔记](http://numerhero.github.io/2015/08/29/JSON.html)

	

## 感谢

[妙味课堂](http://www.miaov.com/)
	
[关于幂等性的理解](http://www.cnblogs.com/weidagang2046/archive/2011/06/04/2063696.html)
	
[百度知道关于url长度的实验](http://zhidao.baidu.com/link?url=1F1B2ZrlW6fEpQR5BQU3bnPS-hY_zI0WJAcUq0vW4We4TCDTewSNpIUjYmj1rBRGXA9mGd4BIzGEOM6IlFdsiY3A1YwuBbvoSlowFK4I_AC)

[引用了陈曦明前辈的一些话](http://www.cnblogs.com/hyddd/archive/2009/03/31/1426026.html)

[引用了yibuyisheng前辈的一些话](http://blog.sina.com.cn/s/blog_9f6de58301018axo.html)
