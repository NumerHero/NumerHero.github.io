---
layout: post
title: Ajax学习笔记
category: 技术
keywords: 技术,Ajax,wampserver,建站
---
## 准备工作
因为我们接下来学习的是如何异步的与后台交换数据
所以我们需要先下载一个服务器软件(帮我们配置好默认的配置信息)
然后将我们的主机模拟成一台服务器，进行接下来的学习

我学习AJAX的时候使用的wampserver 一个法国人开发的一个服务器软件
里面包含了PHP运行环境、Aapache运行环境和MySQL

大家根据自己电脑的位数 自行下载wampserver

## 使用wampserver 可能会遇到的问题

问题一 :
点击Your Projects的下的文件夹链接， url变成项目名，路径出错，没有了localhost

解决方法:在www目录下找到index.php，然后修改里面查找$projectContents，或直接查看338行代码，修改'http://'为'http://localhost/'即可。

## 小白级使用wampserver
双击打开wampserver 在右下角有运行图标
![shootpic](/assets/img/AJAX-shootpic1.png)

localhost就是你的本机地址
www directory 是本机存放数据的文件夹 你练习的文件都需要存在www这个文件夹里面

更深入的了解wampserver 可以自己百度 这里不再赘余

## 什么是AJAX？
Ajax (Asynchronous Javascript And XML) 也就是异步的 javascript 和 XML

首先解释一下所谓的异步和同步是什么

在生活中，异步就是行为上的不同步，不协调，比如一个工程分工 A 和 B的工作速度不同，结果工作进度异步
同步就是行为上的相同，比如中央进行利率调整，同步的，股市也会因此涨跌

但是，在计算机中，异步和同步理解起来就和生活中的完全相反

异步 :进程非堵塞的
	e.g:
{% highlight JavaScript %}
settimeout(consonle.log(1),2000);
console.log(2);
{% endhighlight %}
	
这里settimeout也就是2秒后打印出1
但是consonle.log(2)不会等settimtout2秒打印出1后才执行，它会立即执行，也就是说settimeout这个代码块不会堵塞总体代码的执行进程，之后的代码不会因为它的延时执行而不立即执行

同步 :进程堵塞的
e.g
{% highlight  JavaScript %}
<script src="jquery.js"></script>
<script>
window.onload = function()
{
	$(function(){});
}
</script>
{% endhighlight %}

如果要让 `$(function(){});`  这句代码执行。 必须等到这个库`<script src="jquery.js"></script>` 加载完，不然这个封装的方法就无法使用，这就是所谓的进程堵塞，也就是同步

说白了，生活中的同步异步针对的各个对象之间的联系，而计算机中是针对进程上的联系

## 最基本的AJAX

直接上代码:
{% highlight  JavaScript %}
	//可以想象成虚拟的打开了一个输入Url的地址框
	try
	{
		//IE7以上创建AJAX对象
		xhr = new XMLHttpRequest();
	}
	catch(e)
	{
		//兼容IE6 以ActiveXObject插件创建AJAX对象
		xhr = new ActiveXObject('Microsoft.XMLHTTP');
	}

	//可以想象成向这个虚拟的地址框里输入要访问文件的地址
	xhr.open('get','需要加载的文件的文件名','是否异步(true & false)');

	//可以想象成回车发送请求
	xhr.send();
	
	//服务器接收处理请求，然后返回文件数据
	xhr.onreadystatechange = function()
	{
		if(xhr.readystate == 4)
		{
			//如果HTTP状态码 等于 200(请求成功) 那么就打印出返回的文件内容
			if( xhr.status == 200)
			{
				alert( xhr.responseText );
			}
			else
			{
				alert( '出错咯 ，Err : ' + xhr.status)
			}
		}
	}
{% endhighlight %}

对上面的代码做一些解释:

readystate : 是AJAX的状态码，用来表示AJAX运行的各种状态

	0 >>（初始化）还没有调用open()方法
	1 >>（载入）已调用send()方法，正在发送请求
	2 >>（载入完成）send()方法完成，已收到全部响应内容
	3 >>（解析）正在解析响应内容
	4 >>（完成）响应内容解析完成，可以在客户端调用了

on readystate change事件 : 当AJAX状态改变执行事件
xhr.status : 服务器(请求资源)的状态 HTTP状态编码

responseText：返回以文本形式存放的内容(注意: 不论什么格式的内容都会以文本形式返回，如果编码存在问题 ， 会导致一些其他问题)

responseXML：返回XML形式的内容

	

